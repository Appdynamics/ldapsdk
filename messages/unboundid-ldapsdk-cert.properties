# Copyright 2017 Ping Identity Corporation
# All Rights Reserved.


# Copyright (C) 2017 Ping Identity Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License (GPLv2 only)
# or the terms of the GNU Lesser General Public License (LGPLv2.1 only)
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses>.


# The fully-qualified name of the class to create.
class.name=com.unboundid.util.ssl.cert.CertMessages

ERR_CERT_ENCODE_ERROR=An error occurred while attempting to encode an X.509 \
  certificate {0} using the provided information:  {1}
ERR_CERT_ENCODE_NAME_CANNOT_GET_SCHEMA=Unable to encoded DN ''{0}'' for \
  inclusion in an encoded X.509 certificate because an error occurred while \
  trying to get the default standard schema:  {1}
ERR_CERT_ENCODE_NAME_UNKNOWN_ATTR_TYPE=Unable to encode DN ''{0}'' for \
  inclusion in an encoded X.509 certificate because it includes attribute \
  ''{1}'' that is not defined in the default standard schema.
ERR_CERT_ENCODE_NAME_ERROR=Unable to encode DN ''{0}'' for inclusion in an \
  encoded X.509 certificate:  {1}
ERR_CERT_DECODE_NOT_SEQUENCE=Unable to decode the provided byte array \
  as an X.509 certificate because the contents of the array could not be \
  parsed as a DER sequence:  {0}
ERR_CERT_DECODE_UNEXPECTED_SEQUENCE_ELEMENT_COUNT=Unable to decode the \
  provided byte array as an X.509 certificate because the DER sequence \
  contained {0,number,0}, which is different from the three elements \
  (tbsCertificate, signatureAlgorithm, and signatureValue) that were expected.
ERR_CERT_DECODE_FIRST_ELEMENT_NOT_SEQUENCE=Unable to decode the provided \
  byte array as an X.509 certificate because the first element of the DER \
  sequence (expected to be the tbsCertificate element) could not itself be \
  parsed as a DER sequence:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_VERSION=Unable to decode the provided byte \
  array as an X.509 certificate because an error was encountered while trying \
  to parse the X.509 certificate version as an integer:  {0}
ERR_CERT_DECODE_UNSUPPORTED_VERSION=Unable to decode the provided byte array \
  as an X.509 certificate because it appears to have a version number of \
  {0,number,0}, which not a supported version.  Only versions 1, 2, and 3 are \
  supported.
ERR_CERT_DECODE_CANNOT_PARSE_SERIAL_NUMBER=Unable to decode the provided byte \
  array as an X.509 certificate because an error was encountered while trying \
  to parse the serial number as an integer:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_SIG_ALG=Unable to decode the provided byte \
  array as an X.509 certificate because an error was encountered while trying \
  to parse the signature algorithm:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_ISSUER_DN=Unable to decode the provided byte \
  array as an X.509 certificate because an error was encountered while trying \
  to parse the issuer DN:  {0} 
ERR_CERT_DECODE_NOT_BEFORE_UNEXPECTED_TYPE=Unable to decode the provided byte \
  array as an X.509 certificate because the notBefore element had an \
  unexpected BER type of {0}, which does not match the universal BER type for \
  either a UTC time ({1}) or generalized time ({2}) element.
ERR_CERT_DECODE_NOT_AFTER_UNEXPECTED_TYPE=Unable to decode the provided byte \
  array as an X.509 certificate because the notAfter element had an \
  unexpected BER type of {0}, which does not match the universal BER type for \
  either a UTC time ({1}) or generalized time ({2}) element.
ERR_CERT_DECODE_COULD_NOT_PARSE_VALIDITY=Unable to decode the provided byte \
  array as an X.509 certificate because an error occurred while trying to \
  parse the validity sequence:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_SUBJECT_DN=Unable to decode the provided byte \
  array as an X.509 certificate because an error was encountered while trying \
  to parse the subject DN:  {0} 
ERR_CERT_DECODE_CANNOT_PARSE_PUBLIC_KEY_INFO=Unable to decode the provided \
  byte array as an X.509 certificate because an error occurred while trying \
  to parse the subject public key info element:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_ISSUER_UNIQUE_ID=Unable to decode the provided \
  byte array as an X.509 certificate because an error occurred while trying \
  to parse the issuer unique ID element:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_SUBJECT_UNIQUE_ID=Unable to decode the provided \
  byte array as an X.509 certificate because an error occurred while trying \
  to parse the subject unique ID element:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_EXTENSION=Unable to decode the provided byte \
  array as an X.509 certificate because an error occurred while trying to \
  parse the set of certificate extensions:  {0}
ERR_CERT_DECODE_SIG_ALG_MISMATCH=Unable to decode the provided byte array as \
  an X.509 certificate because there is a mismatch between the signature \
  algorithm contained in the tbsCertificate sequence ({0}) and the signature \
  algorithm contained in the outer certificate sequence ({1}).  These \
  signature algorithms must match.
ERR_CERT_DECODE_CANNOT_PARSE_SIG_VALUE=Unable to decode the provided byte \
  array as an X.509 certificate because an error occurred while trying to \
  parse the signature value:  {0}
ERR_CERT_DECODE_NAME_NOT_SEQUENCE=An error occurred while trying to parse the \
  name as an RDN sequence:  {0}
ERR_CERT_DECODE_CANNOT_PARSE_NAME_SEQUENCE_ELEMENT=An error occurred while \
  trying to parse RDN element {0,number,0} in the name sequence:  {1}
ERR_PRIVATE_KEY_DECODE_NOT_SEQUENCE=Unable to decode the provided byte array \
  as a PKCS#8 private key because the contents of the array could not be \
  parsed as a DER sequence:  {0}
ERR_PRIVATE_KEY_DECODE_NOT_ENOUGH_ELEMENTS=Unable to decode the provided byte \
  array as a PKCS#8 private key because the private key sequence only had \
  {0,number,0} elements, while the sequence should have a minimum of three \
  elements.
ERR_PRIVATE_KEY_DECODE_CANNOT_PARSE_VERSION=Unable to decode the provided \
  byte array as a PKCS#8 private key because an error occurred while trying \
  to parse the private key version:  {0}
ERR_PRIVATE_KEY_DECODE_UNSUPPORTED_VERSION=Unable to decode the provided byte \
  array as a PKCS#8 private key because it appears to have a version number \
  of {0,number,0}, which is not a supported version.  Only versions 1 and 2 \
  are supported.
ERR_PRIVATE_KEY_DECODE_CANNOT_PARSE_ALGORITHM=Unable to decode the provided \
  byte array as a PKCS#8 private key because an error occurred while trying \
  to parse the private key algorithm:  {0}
ERR_PRIVATE_KEY_DECODE_CANNOT_PARSE_PUBLIC_KEY=Unable to decode the provided \
  byte array as a PKCS#8 private key because an error occurred while trying \
  to parse the public key:  {0}
ERR_PRIVATE_KEY_ENCODE_ERROR=An error occurred while tyring to encode PKCS#8 \
  private key {0}:  {1}
ERR_EXTENSION_ENCODE_ERROR=Unable to encode X.509 certificate extension \
  {0}:  {1}
ERR_AUTHORITY_KEY_ID_EXTENSION_CANNOT_PARSE=Unable to parse the provided \
   X.509 certificate extension {0} as an authority key identifier extension:  \
  {1}
INFO_AUTHORITY_KEY_ID_EXTENSION_NAME=Authority Key Identifier
ERR_KEY_USAGE_EXTENSION_CANNOT_PARSE=Unable to parse the provided X.509 \
  certificate extension {0} as key usage extension:  {1}
INFO_KEY_USAGE_EXTENSION_NAME=Key Usage
ERR_SUBJECT_KEY_ID_EXTENSION_CANNOT_PARSE=Unable to parse the provided X.509 \
  certificate extension {0} as a subject key identifier extension:  {1}
INFO_SUBJECT_KEY_IDENTIFIER_EXTENSION_NAME=Subject Key Identifier
ERR_GENERAL_NAMES_CANNOT_PARSE=Unable to parse the provided element as a \
  general names element:  {0}
ERR_GENERAL_NAMES_CANNOT_ENCODE=An error occurred while trying to encode \
  general names element {0}:  {1}
ERR_GENERAL_ALT_NAME_EXTENSION_CANNOT_PARSE=Unable to parse the provided \
  X.509 certificate extension {0} as an extension of type {1}:  {2}
INFO_SUBJECT_ALT_NAME_EXTENSION_NAME=Subject Alternative Name
INFO_ISSUER_ALT_NAME_EXTENSION_NAME=Issuer Alternative Name
ERR_BASIC_CONSTRAINTS_EXTENSION_CANNOT_PARSE=Unable to parse the provided \
  X.509 certificate extension {0} as a basic constraints extension:  {1}
INFO_BASIC_CONSTRAINTS_EXTENSION_NAME=Basic Constraints
ERR_EXTENDED_KEY_USAGE_EXTENSION_CANNOT_PARSE=Unable to parse the provided \
  X.509 certificate extension {0} as an extended key usage extension:  {1}
ERR_EXTENDED_KEY_USAGE_EXTENSION_CANNOT_ENCODE=An error occurred while trying \
  to encode the value of an extended key usage extension with key usage IDs \
  {0}:  {1}
INFO_EXTENDED_KEY_USAGE_EXTENSION_NAME=Extended Key Usage
INFO_EXTENDED_KEY_USAGE_ID_TLS_SERVER_AUTHENTICATION=TLS Server Authentication
INFO_EXTENDED_KEY_USAGE_ID_TLS_CLIENT_AUTHENTICATION=TLS Client Authentication
INFO_EXTENDED_KEY_USAGE_ID_CODE_SIGNING=Code Signing
INFO_EXTENDED_KEY_USAGE_ID_EMAIL_PROTECTION=Email Protection
INFO_EXTENDED_KEY_USAGE_ID_TIME_STAMPING=Time Stamping
INFO_EXTENDED_KEY_USAGE_ID_OCSP_SIGNING=OCSP Signing
ERR_CRL_DP_UNRECOGNIZED_NAME_ELEMENT_TYPE=Unable to decode the provided ASN.1 \
  element as a CRL distribution point because the distributionPoint element \
  had a nested element with an unexpected DER type of {0}.
ERR_CRL_DP_CANNOT_DECODE=Unable to decode the provided ASN.1 element as a CRL \
  distribution point:  {0}
ERR_CRL_DP_ENCODE_CANNOT_GET_SCHEMA=Unable to encode CRL distribution point \
  {0} because an error occurred while trying to get the default standard \
  schema for use in encoding nameRelativeToCRLIssuer value ''{1}'':  {2}
ERR_CRL_DP_ENCODE_UNKNOWN_ATTR_TYPE=Unable to encode CRL distribution point \
  {0} because nameRelativeToCRLIssuer value ''{1}'' includes attribute type \
  ''{2}'' that is not defined in the default standard schema.
ERR_CRL_DP_ENCODE_ERROR=Unable to encode CRL distribution point {0} because \
  an error occurred while trying to encode nameRelativeToCRLIssuer value \
  ''{1}'':  {2}
ERR_CRL_DP_EXTENSION_CANNOT_PARSE=Unable to parse the provided X.509 \
   certificate extension {0} as a CRL distribution points extension:  {1}
INFO_CRL_DP_EXTENSION_NAME=CRL Distribution Points
ERR_RSA_PUBLIC_KEY_CANNOT_DECODE=Unable to decode the X.509 certificate \
  public key as an RSA public key:  {0}
ERR_RSA_PRIVATE_KEY_UNSUPPORTED_VERSION=Unable to decode the PKCS#8 private \
  key as an RSA private key because it has an unsupported version of \
  {0,number,0}.  Only versions 0 and 1 are supported.
ERR_RSA_PRIVATE_KEY_CANNOT_DECODE=Unable to decode the PKCS#8 private key \
  as an RSA private key:  {0}
ERR_EC_PUBLIC_KEY_PARSE_UNEXPECTED_UNCOMPRESSED_FIRST_BYTE=Unable to decode \
  the X.509 certificate public key as an elliptic curve public key because \
  the public key has a size of 65 bytes, indicating that it uses the \
  uncompressed form of the point, but the value of the first byte is {0} \
  rather than the expected value of 04.
ERR_EC_PUBLIC_KEY_PARSE_UNEXPECTED_COMPRESSED_FIRST_BYTE=Unable to decode \
  the X.509 certificate public key as an elliptic curve public key because \
  the public key has a size of 33 bytes, indicating that it uses the \
  compressed form of the point, but the value of the first byte is {0} rather \
  than the expected value of 02 (to indicate that the y coordinate is even) \
  or 0x03 (to indicate that the y coordinate is odd).
ERR_EC_PUBLIC_KEY_PARSE_UNEXPECTED_SIZE=Unable to decode the X.509 \
  certificate public key as an elliptic curve public key because the public \
  key has a size of {0} bytes, which does not match the expected size for \
  either the uncompressed (65 bytes) or compressed (33 bytes) forms.
ERR_EC_PUBLIC_KEY_PARSE_ERROR=Unable to decode the X.509 certificate \
  public key as an elliptic curve public key:  {0}
ERR_EC_PUBLIC_KEY_ENCODE_X_TOO_LARGE=Unable to encode elliptic curve public \
  key {0} because the x coordinate value requires {1,number,0} bytes to \
  encode, which is larger than the maximum allowed size of 32 bytes.
ERR_EC_PUBLIC_KEY_ENCODE_Y_TOO_LARGE=Unable to encode elliptic curve public \
  key {0} because the y coordinate value requires {1,number,0} bytes to \
  encode, which is larger than the maximum allowed size of 32 bytes.
ERR_EC_PRIVATE_KEY_UNSUPPORTED_VERSION=Unable to decode the PKCS#8 private \
  key as an elliptic curve private key because it has an unsupported version \
  of {0,number,0}.  Only version 1 is supported.
ERR_EC_PRIVATE_KEY_CANNOT_DECODE=Unable to decode the PKCS#8 private key \
  as an elliptic curve private key:  {0}
ERR_EC_PRIVATE_KEY_CANNOT_ENCODE=An error occurred while trying to encode \
  elliptic curve private key {0}:  {1}
