/*
 * Copyright 2009-2017 UnboundID Corp.
 * All Rights Reserved.
 */
/*
 * Copyright (C) 2009-2017 UnboundID Corp.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (GPLv2 only)
 * or the terms of the GNU Lesser General Public License (LGPLv2.1 only)
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses>.
 */
package com.unboundid.util;



import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;



/**
 * This class provides test coverage for the {@code HorizontalAlignment} enum.
 */
public class HorizontalAlignmentTestCase
       extends UtilTestCase
{
  /**
   * Provides test coverage for the automatically-generated values and valueOf
   * methods.
   */
  @Test()
  public void testAutoGeneratedMethods()
  {
    HorizontalAlignment[] values = HorizontalAlignment.values();

    assertNotNull(values);
    assertFalse(values.length == 0);

    for (HorizontalAlignment f : values)
    {
      assertNotNull(HorizontalAlignment.valueOf(f.name()));
      assertEquals(HorizontalAlignment.valueOf(f.name()), f);
    }
  }



  /**
   * Tests the {@code format} method.
   *
   * @param  text            The text to be formatted.
   * @param  width           The width to use.
   * @param  expectedLeft    The expected result after formatting for an
   *                         alignment of "LEFT".
   * @param  expectedCenter  The expected result after formatting for an
   *                         alignment of "CENTER".
   * @param  expectedRight   The expected result after formatting for an
   *                         alignment of "RIGHT".
   */
  @Test(dataProvider="testFormatData")
  public void testFormat(String text, int width, String expectedLeft,
                         String expectedCenter, String expectedRight)
  {
    StringBuilder leftBuffer   = new StringBuilder();
    StringBuilder centerBuffer = new StringBuilder();
    StringBuilder rightBuffer  = new StringBuilder();

    HorizontalAlignment.LEFT.format(leftBuffer, text, width);
    HorizontalAlignment.CENTER.format(centerBuffer, text, width);
    HorizontalAlignment.RIGHT.format(rightBuffer, text, width);

    assertEquals(leftBuffer.toString(), expectedLeft);
    assertEquals(centerBuffer.toString(), expectedCenter);
    assertEquals(rightBuffer.toString(), expectedRight);
  }



  /**
   * Provides test data for use when testing the {@code format} method.
   *
   * @return  Test data for use when testing the {@code format} method.
   */
  @DataProvider(name="testFormatData")
  public Object[][] getTestFormatData()
  {
    return new Object[][]
    {
      new Object[] { "", 0, "", "", "" },
      new Object[] { " ", 0, "", "", "" },
      new Object[] { "", 1, " ", " ", " " },
      new Object[] { "a", 1, "a", "a", "a" },
      new Object[] { "a", 2, "a ", "a ", " a" },
      new Object[] { "a", 3, "a  ", " a ", "  a" },
      new Object[] { "aa", 1, "a", "a", "a" },
      new Object[] { "aa", 2, "aa", "aa", "aa" },
      new Object[] { "aa", 3, "aa ", "aa ", " aa" },
      new Object[] { "aaa", 1, "a", "a", "a" },
      new Object[] { "aaa", 2, "aa", "aa", "aa" },
      new Object[] { "aaa", 3, "aaa", "aaa", "aaa" },
    };
  }
}
